/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'jacoco'
    id 'application'
    id 'idea'
    id 'org.sonarqube' version '3.0'
    id 'org.owasp.dependencycheck' version '6.0.5'
    id 'org.kordamp.gradle.jandex' version '0.8.0'
    id 'com.adarshr.test-logger' version '2.1.1'
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", ${project.compileJava.options.encoding}
        property "sonar.exclusions", "**/clover/src-instrumented/**,**/clover/src-test-instrumented/**"
        property "sonar.projectName",${project.name}
        property "sonar.projectKey",${project.groupId}.${project.artifactId}
        property "sonar.projectVersion>",${project.version}
        property "sonar.log.level",'DEBUG'
        property "sonar.sources",${sourceSets.main.allJava.srcDirs}
        property "sonar.tests", ${sourceSets.test.allJava.srcDirs}
        property "sonar.java.source", ${project.sourceCompatibility}
        /*
        <sonar.clover.version>${clover.version}</sonar.clover.version>
        */
        property "sonar.java.coveragePlugin",'clover'
        property "sonar.clover.reportPath", "${project.buildDir}/site/clover/clover.xml"
        property "sonar.surefire.reportsPath","${project.buildDir}/surefire-reports"
        property "sonar.junit.reportPaths", "${project.rootDir}/target/surefire-reports"
        property "sonar.clover.reportPath", "${project.rootDir}/target/site/clover/clover.xml"
        property "sonar.clover.reportPaths", "${project.rootDir}/target/site/clover/clover.xml"
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/jacoco/test/jacocoTestReport.xml"
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

dependencies {
    api 'jakarta.servlet:jakarta.servlet-api:4.0.3'
    implementation 'org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.33'
    implementation 'org.glassfish.jersey.inject:jersey-hk2:2.33'
    implementation 'org.glassfish.jersey.core:jersey-client:2.33'
    implementation 'org.glassfish.jersey.core:jersey-server:2.33'
    implementation 'org.glassfish.jersey.containers:jersey-container-servlet:2.33'
    implementation 'org.glassfish.jersey.security:oauth1-server:2.33'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'org.glassfish.jersey.media:jersey-media-json-jackson:2.33'
    implementation 'org.glassfish.jersey.media:jersey-media-json-processing:2.33'
    implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.2'
    implementation 'org.glassfish.jersey.media:jersey-media-multipart:2.33'
    implementation 'org.glassfish.jersey.ext.cdi:jersey-cdi1x:2.33'
    implementation 'org.glassfish.jersey.ext.cdi:jersey-weld2-se:2.33'
    implementation 'org.jboss.weld.se:weld-se-core:3.1.2.Final'
    implementation 'org.jboss:jandex:2.1.3.Final'
    implementation('org.apache.logging.log4j:log4j-api:2.12.1') {
        exclude module: 'org.slf4j:slf4j-log4j12:2.12.1'
    }
    implementation 'org.apache.logging.log4j:log4j-core:2.12.1'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.12.1'
    implementation 'org.apache.logging.log4j:log4j-jul:2.12.1'
    implementation 'org.apache.logging.log4j:log4j-web:2.12.1'
    implementation 'com.fasterxml:classmate:1.3.1'
    implementation 'io.swagger.core.v3:swagger-jaxrs2:2.1.6'
    implementation 'io.swagger.core.v3:swagger-jaxrs2-servlet-initializer-v2:2.1.6'
    implementation 'org.webjars:swagger-ui:3.37.2'
    implementation 'javax.persistence:javax.persistence-api:2.2'
    implementation 'org.eclipse.persistence:eclipselink:2.7.7'
    implementation 'org.jooq:jooq:3.14.4'
    implementation 'org.jooq:jooq-meta:3.14.4'
    implementation 'org.jooq:jooq-codegen:3.14.4'
    implementation 'org.modelmapper:modelmapper:2.3.0'
    testImplementation 'org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:2.33'
    // Don't ask me wy, useJunitPlatform does not work with 5.6.2 as maven did!!!
    // testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testImplementation  'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.25.0'
    testImplementation 'org.apache.derby:derby:10.15.2.0'
    testImplementation 'org.apache.derby:derbytools:10.15.2.0'
}
/*
jacoco {
    toolVersion = "0.8.6"
    reportsDirectory = file("${project.buildDir}/customJacocoReportDir")
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        csv.enabled true
        html.destination file("${project.buildDir}/jacocoHtml")
    }
}

task applicationCodeCoverageReport(type:JacocoReport) {
    executionData run
    sourceSets sourceSets.main
}
*/
// If you have integration/smoke/functional in other dirs use intTest, funcTest, smokeTest etc.
/*
sourceSets {
    intTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}
*/

testlogger {
    theme 'standard'
    showExceptions true
    showStackTraces true
    showFullStackTraces false
    showCauses true
    slowThreshold 2000
    showSummary true
    showSimpleNames false
    showPassed true
    showSkipped true
    showFailed true
    showStandardStreams true
    showPassedStandardStreams true
    showSkippedStandardStreams true
    showFailedStandardStreams true
    logLevel 'lifecycle'
}

configurations {
    intTestImplementation.extendsFrom implementation
    intTestRuntimeOnly.extendsFrom runtimeOnly
}

task integrationTest(type: Test) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    dependencies {
        // testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
        testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.7.0'
    }
    useJUnitPlatform() {
        includeEngines 'junit-vintage'
        excludeEngines 'junit-jupiter'
    }
    description = 'Runs integration tests.'
    group = 'verification'

    // Here you can use the same path as the main test set or... sourceSets.intTest, .funcTest etc
    // testClassesDirs = sourceSets.test.output.classesDirs
    // classpath += sourceSets.main.output.classesDirs + sourceSets.test.runtimeClasspath
    // classpath += sourceSets.test.runtimeClasspath
    // testClassesDirs = sourceSets.test.output
    // classpath = sourceSets.test.runtimeClasspath
    // logger.lifecycle("Test: " + classpath.getAsPath() + " - - " + testClassesDirs.getAsPath())
    outputs.upToDateWhen { false }
    shouldRunAfter test
    include '**/IT*.*', '**/*IT.*', '**/*ITCase.*'
    exclude '**/Test*.*', '**/*Test.*', '**/*Tests.*', '**/*TestCase.*'
}

check.dependsOn integrationTest

test {
    description = 'Runs unit tests.'
    useJUnitPlatform {
        // includeTags 'fast', 'smoke & feature-a'
        // excludeTags 'slow', 'ci'
        // includeEngines 'junit-vintage'
        // excludeEngines 'junit-jupiter'
    }
    // finalizedBy jacocoTestReport
    // Like maven surefire plugin, excludes comes from failsafe plugin
    // explicitly include or exclude tests
    include '**/Test*.class', '**/*Test.class', '**/*Tests.class', '**/*TestCase.class'
    exclude '**/IT*.*', '**/*IT.*', '**/*ITCase.*', '**CdiBaseTest.*'
}


dependencyCheck {
    autoUpdate=true
    format='ALL'
    suppressionFile="${project.rootDir}/build-support/suppressions.xml"
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    // withJavadocJar()
    // withSourcesJar()
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:deprecation'
}

compileTestJava {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:deprecation'
}

javadoc {
    options.encoding = 'UTF-8'
}

// check.dependsOn dependencyCheckAnalyze

project.tasks["sonarqube"].dependsOn "jacocoTestReport"

group = 'org.example'
version = '1.0-SNAPSHOT'
description = 'jersey-grizzly2-test'


publishing {
    publications {
        maven(MavenPublication) {
            groupId = group
            artifactId = description
            version = version
            from components.java
        }
    }
}